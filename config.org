** Meta
#+begin_src elisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Justin Thong"
      user-mail-address "justinthong93@gmail.com")
#+end_src

** Font
#+begin_src elisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "Source Code Pro" :size 13 :weight 'semi-light)
;;       ;; doom-variable-pitch-font (font-spec :family "sans" :size 13)
;;       )
#+end_src

** Theme
#+begin_src elisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(require 'modus-themes)
(setq doom-theme 'modus-vivendi)
;; Remove default hover highlight that removes ability to see syntax highlighting
;; (custom-set-faces! '((hl-line solaire-hl-line-face) :foreground nil))
#+end_src

** Org Mode
#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/GitHub/org") ;; original computer is in home dir
#+end_src

** Projectile Mode
#+begin_src elisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))

(with-system gnu/linux
  (message "You are free!")
  (setq projectile-project-search-path '("~/Repos/"))
  )


(with-system darwin
  (message "You are not free! But I guess you must be rich")
  (setq projectile-project-search-path '("~/Documents/GitHub/"))
  (setq cardstack-monorepo-path "~/Documents/Github/cardstack")
    ;; https://stackoverflow.com/questions/17164767/emacs-lisp-concise-way-to-get-directory-files-without-and
  ;; (setq cardpay-subpackages (directory-files (expand-file-name (concat cardstack-monorepo-path "/packages")) nil "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)"))
  ;; (mapcar (lambda (arg) (concat "~/Documents/GitHub/cardstack/" arg)) cardpay-subpackages)

  ;; (projectile-add-known-project)
  )
#+end_src

** Dired
This keybinding is already taken by`SPC o -`
#+begin_src elisp
(use-package dired
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
   "H" 'dired-up-directory
   "L" 'dired-find-file
   )
  )
#+end_src

** Evil
#+begin_src elisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'
(setq global-display-line-numbers-mode 't) ;;sets display evil relative globally
(setq display-line-numbers-type 'relative)
#+end_src

** Javascript
I don't think require is needed because packages.el loads the packages already
#+begin_src elisp
(require 'prettier-js)
(add-hook 'js2-mode-hook 'prettier-js-mode)
(add-hook 'typescript-mode-hook 'prettier-js-mode)
(map! :leader
      :desc "Prettify" "m f" #'prettier-js
      )
#+end_src

** Selection
This helps me expand and contract selection
#+begin_src elisp
(map! :leader
      :desc "Expand region" "v" #'er/expand-region
      )
#+end_src

** Misc
#+begin_src elisp

(display-time-mode 1)
;; (if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
;;     (toggle-frame-maximized)
;;   (toggle-frame-fullscreen))

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Haskell
Again require might not be needed.`lsp-haskell` comes with the original init tag. Note: sometimes have to restart the server. hie file is not needed.
#+begin_src elisp
;; (require 'lsp)
;; (require 'lsp-haskell)
;; (add-hook 'haskell-mode-hook #'lsp)
;; (add-hook 'haskell-literate-mode-hook #'lsp)
(setq haskell-stylish-on-save nil)
(map! :leader
      (:after lsp-mode
       (:prefix ("l" . "LSP")
          :desc "Restart LSP server" "r" #'lsp-workspace-restart
          :desc "Excute code action" "a" #'lsp-execute-code-action
          :desc "Go to definition" "d" #'lsp-find-definition
          :desc "Toggle doc mode" "d" #'lsp-ui-doc-mode
          (:prefix ("u" . "LSP UI")
            :desc "Toggle doc mode" "d" #'lsp-ui-doc-mode
            :desc "Toggle sideline mode"  "s" #'lsp-ui-sideline-mode
            :desc "Glance at doc" "g" #'lsp-ui-doc-glance
            :desc "Toggle imenu"  "i" #'lsp-ui-imenu
            )
          )))
; must have function to replace ghcid version
#+end_src

** LSP
These are generic settings for all languages but given you only use haskell.
#+begin_src elisp
(after! lsp-ui
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-glance 1
        lsp-ui-doc-delay 0.5
        lsp-ui-doc-include-signature t
        lsp-ui-doc-position 'at-point
        lsp-ui-doc-border "#fdf5b1"
        lsp-ui-doc-max-width 65
        lsp-ui-doc-max-height 70
        lsp-ui-sideline-enable t
        lsp-ui-sideline-ignore-duplicate t
        lsp-ui-peek-enable t
        lsp-ui-flycheck-enable -1)

  (add-to-list 'lsp-ui-doc-frame-parameters '(left-fringe . 0))
)
#+end_src

** Presentation
I still don't know how to start presentation at a particular place.
#+begin_src elisp
(defun efs/presentation-setup ()
  (hide-mode-line-mode 1)
  (org-display-inline-images)
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1)
  )
(defun efs/presentation-end ()
  (hide-mode-line-mode 0)
  (text-scale-mode 0)
  )
(use-package org-tree-slide
  :hook (
         (org-tree-slide-play . efs/presentation-setup)
         (org-tree-slide-stop . efs/presentation-end)
         )
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message t)
  (org-tree-slide-deactivate-message t)
  (org-tree-slide-header t)
  (org-tree-slide-skip-comments 'nil)
)
#+end_src

** Command Log Mode
use-package is a reliable way to load packages with certain configs.
#+begin_src elisp
(use-package command-log-mode
  :config
  (global-command-log-mode)
  )
(setq command-log-mode-window-font-size 5)
#+end_src

** Indentation Formatting

#+begin_src elisp
(setq whitespace-mode 't)
#+end_src


** Lessons in Keybindings

#+begin_src elisp
(map! :leader
      :desc "test random prefix"
      "a j j" #'org-tree-slide-skip-comments-toggle)

(map! :leader
      (:prefix-map ("t" . "toggle")
       (:prefix ("s" . "tree-slide")
        :desc "Skip comments in slide" "c" #'org-tree-slide-skip-comments-toggle
        )
       )
      )
#+end_src

** Tiny

This helps us build linear ranges


** Electric Pairing for parentheses
Fix this later
;; #+begin_src elisp
 ;; (defun electric-pair ()
;;     "If at end of line, insert character pair without surrounding spaces.
;; Otherwise, just insert the typed character."
;;     (interactive)
;;     (if (eolp) (let (parens-require-spaces) (insert-pair)) (self-insert-command 1)))
;; (add-hook 'python-mode-hook
;;             (lambda ()
;;             (define-key python-mode-map "\"" 'electric-pair)
;;             (define-key python-mode-map "\'" 'electric-pair)
;;             (define-key python-mode-map "(" 'electric-pair)
;;             (define-key python-mode-map "[" 'electric-pair)
;;             (define-key python-mode-map "{" 'electric-pair)))
;; (add-hook js-mode-hook
;;             (lambda ()
;;             (define-key js-mode-map "(" 'electric-pair)
;;             (define-key js-mode-map "[" 'electric-pair)
;;             (define-key js-mode-map "{" 'electric-pair)))
;; #+end_src
** Eshell or Terminals
https://www.reddit.com/r/emacs/comments/b6n3t8/what_would_it_take_to_get_terminal_colors_in/
;; (add-hook 'eshell-mode-hook
;;           (lambda ()
;;             (setenv "TERM" "xterm-256color")))
;; (add-hook 'eshell-before-prompt-hook (setq xterm-color-preserve-properties t))
;; (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
;; (setq eshell-output-filter-functions
;;      (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
** Haskell arrsows
https://www.emacswiki.org/emacs/PrettySymbolsForLanguages
;; (defun unicode-symbol (name)
;;   "Translate a symbolic name for a Unicode character -- e.g., LEFT-ARROW
;;  or GREATER-THAN into an actual Unicode character code. "
;;   (decode-char 'ucs (case name
;;                       ('right-triangle #X22b3)
;;                       ('left-triangle #X22b2)
;;                       ('left-arrow 8592)
;;                       ('up-arrow 8593)
;;                       ('right-arrow 8594)
;;                       ('down-arrow 8595)
;;                       ('right-double-arrow 8658)
;;                       ('left-double-arrow 8656)
;;                       ('double-vertical-bar #X2551)
;;                       ('equal #X003d)
;;                       ('not-equal #X2260)
;;                       ('identical #X2261)
;;                       ('not-identical #X2262)
;;                       ('much-less-than #X226a)
;;                       ('much-greater-than #X226b)
;;                       ('less-than #X003c)
;;                       ('greater-than #X003e)
;;                       ('less-than-or-equal-to #X2264)
;;                       ('greater-than-or-equal-to #X2265)
;;                       ('logical-and #X2227)
;;                       ('logical-or #X2228)
;;                       ('logical-neg #X00AC)
;;                       ('nil #X2205)
;;                       ('horizontal-ellipsis #X2026)
;;                       ('double-exclamation #X203C)
;;                       ('prime #X2032)
;;                       ('double-prime #X2033)
;;                       ('for-all #X2200)
;;                       ('there-exists #X2203)
;;                       ('element-of #X2208)
;;                       ('square-root #X221A)
;;                       ('squared #X00B2)
;;                       ('cubed #X00B3)
;;                       ('lambda #X03BB)
;;                       ('alpha #X03B1)
;;                       ('beta #X03B2)
;;                       ('gamma #X03B3)
;;                       ('delta #X03B4))))
;; (defun substitute-pattern-with-unicode (pattern symbol)
;;   "Add a font lock hook to replace the matched part of PATTERN with the
;; Unicode symbol SYMBOL looked up with UNICODE-SYMBOL."
;;   (interactive)
;;   (font-lock-add-keywords
;;    nil `((,pattern
;;           (0 (progn (compose-region (match-beginning 1) (match-end 1)
;;                                     ,(unicode-symbol symbol)
;;                                     'decompose-region)
;;                     nil))))))
;; (defun substitute-patterns-with-unicode (patterns)
;;   "Call SUBSTITUTE-PATTERN-WITH-UNICODE repeatedly."
;;   (mapcar #'(lambda (x)
;;               (substitute-pattern-with-unicode (car x)
;;                                                (cdr x)))
;;           patterns))
;; (defun haskell-unicode ()
;;     (interactive)
;;     (substitute-patterns-with-unicode
;;         (list (cons "\\(<-\\)" 'left-arrow)
;;             (cons "\\(->\\)" 'right-arrow)
;;             (cons "\\(==\\)" 'identical)
;;             (cons "\\(/=\\)" 'not-identical)
;;             (cons "\\(()\\)" 'nil)
;;             (cons "\\<\\(sqrt\\)\\>" 'square-root)
;;             (cons "\\(&&\\)" 'logical-and)
;;             (cons "\\(||\\)" 'logical-or)
;;             (cons "\\<\\(not\\)\\>" 'logical-neg)
;;             (cons "\\(>\\)\\[^=\\]" 'greater-than)
;;             (cons "\\(<\\)\\[^=\\]" 'less-than)
;;             (cons "\\(>=\\)" 'greater-than-or-equal-to)
;;             (cons "\\(<=\\)" 'less-than-or-equal-to)
;;             (cons "\\<\\(alpha\\)\\>" 'alpha)
;;             (cons "\\<\\(beta\\)\\>" 'beta)
;;             (cons "\\<\\(gamma\\)\\>" 'gamma)
;;             (cons "\\<\\(delta\\)\\>" 'delta)
;;             (cons "\\(''\\)" 'double-prime)
;;             (cons "\\('\\)" 'prime)
;;             (cons "\\(!!\\)" 'double-exclamation)
;;             (cons "\\(\\.\\.\\)" 'horizontal-ellipsis))))

;; (add-hook 'haskell-mode 'haskell-unicode)
;; (setq haskell-font-lock-symbols t)
1!!!!!!!!!!!!!!!!
** Define Number mode
This definitely overridded some keys. But I defo dont use anything in insert mode. Also you can definitely do a better job with the mapping maybe load with one function only.
#+begin_src elisp
;; (define-key key-translation-map (kbd "C-h") (kbd "DEL"))
;; (define-key key-translation-map (kbd "M-q") (kbd "1"))
;; (define-key key-translation-map (kbd "M-w") (kbd "2"))
;; (define-key key-translation-map (kbd "M-e") (kbd "3"))
;; (define-key key-translation-map (kbd "M-r") (kbd "4"))
;; (define-key key-translation-map (kbd "M-t") (kbd "5"))
;; (define-key key-translation-map (kbd "M-y") (kbd "6"))
;; (define-key key-translation-map (kbd "M-u") (kbd "7"))
;; (define-key key-translation-map (kbd "M-i") (kbd "8"))
;; (define-key key-translation-map (kbd "M-o") (kbd "9"))
;; (define-key key-translation-map (kbd "M-p") (kbd "0"))

;; (define-key key-translation-map (kbd "M-a") (kbd "!"))
;; (define-key key-translation-map (kbd "M-s") (kbd "@"))
;; (define-key key-translation-map (kbd "M-d") (kbd "#"))
;; (define-key key-translation-map (kbd "M-f") (kbd "$"))
;; (define-key key-translation-map (kbd "M-g") (kbd "%"))
;; (define-key key-translation-map (kbd "M-h") (kbd "^"))
;; (define-key key-translation-map (kbd "M-j") (kbd "&"))
;; (define-key key-translation-map (kbd "M-k") (kbd "*"))
;; (define-key key-translation-map (kbd "M-l") (kbd "("))
;; (define-key key-translation-map (kbd "M-;") (kbd ")"))

;; (define-key key-translation-map (kbd "M-n") (kbd "-"))
;; (define-key key-translation-map (kbd "M-m") (kbd "="))
;; (define-key key-translation-map (kbd "M-c") (kbd "["))
;; (define-key key-translation-map (kbd "M-v") (kbd "]"))
;; (define-key key-translation-map (kbd "M-C") (kbd "{"))
;; (define-key key-translation-map (kbd "M-V") (kbd "}"))
;; (define-key key-translation-map (kbd "M-N") (kbd "_"))

;; (define-key key-translation-map (kbd "M-z") (kbd "`"))
;; (setq ns-right-alternate-modifier 'left) ;; really set right alt key to not use graphical symbols

;; (define-key key-translation-map (kbd "M-/") (kbd "\"))
;; (define-key key-translation-map (kbd "M-\/") (kbd "\\"))
;; (define-key key-translation-map (kbd "M-\?") (kbd "\|"))
#+end_src

** Key chording for normal mode
Just trying it out ppl say its good

** EXWM
#+begin_src elisp
;; (with-system gnu/linux
;;  (require 'exwm-config)
;;  (exwm-config-default)
;;   )
#+end_src
** Filepaths and dired
Please add this to dired at-point
#+begin_src emacs-lisp
(defun copy-current-file-path ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+end_src

** Rshiny

#+begin_src elisp
(defun shiny()
  "Run r shiny"
  (interactive)
  (shell-command)
        )
;; inserting pipe operator
(defun japhir/insert-r-pipe ()
  "Insert the pipe operator in R, %>%"
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(defun run-in-vterm-kill (process event)
  "A process sentinel. Kills PROCESS's buffer if it is live."
  (let ((b (process-buffer process)))
    (and (buffer-live-p b)
         (kill-buffer b))))

(defun run-in-vterm (command)
  "Execute string COMMAND in a new vterm.

Interactively, prompt for COMMAND with the current buffer's file
name supplied. When called from Dired, supply the name of the
file at point.

Like `async-shell-command`, but run in a vterm for full terminal features.

The new vterm buffer is named in the form `*foo bar.baz*`, the
command and its arguments in earmuffs.

When the command terminates, the shell remains open, but when the
shell exits, the buffer is killed."
  (interactive
   (list
    (let* ((f (cond (buffer-file-name)
                    ((eq major-mode 'dired-mode)
                     (dired-get-filename nil t))))
           (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
      (read-shell-command "Terminal command: "
                          (cons filename 0)
                          (cons 'shell-command-history 1)
                          (list filename)))))
  (with-current-buffer (vterm (concat "*" command "*"))
    (set-process-sentinel vterm--process #'run-in-vterm-kill)
    (vterm-send-string command)
    (vterm-send-return)))
;; making it look like RStudio
;; (setq display-buffer-alist
;;       `(("*R Dired"
;;          (display-buffer-reuse-window display-buffer-in-side-window)
;;          (side . right)
;;          (slot . -1)
;;          (window-width . 0.33)
;;          (reusable-frames . nil))
;;         ("*R"
;;          (display-buffer-reuse-window display-buffer-at-bottom)
;;          (window-width . 0.5)
;;          (reusable-frames . nil))
;;         ("*Help"
;;          (display-buffer-reuse-window display-buffer-in-side-window)
;;          (side . right)
;;          (slot . 1)
;;          (window-width . 0.33)
;;          (reusable-frames . nil))))
;; for now, just use the buffer loading
(defun rshiny ()
  "Running r shiny"
  (interactive)
  (+vterm/toggle 'nil) ;needs to pass in arguments of nil
  )
#+end_src

** Python
#+begin_src elisp
(add-hook! 'python-mode-hook #'python-black-on-save-mode)
(require 'py-isort)
(add-hook! 'before-save-hook #'py-isort-before-save)
#+end_src

** Yas Snippets
#+begin_src elisp
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/.doom.d/snippets")))
#+end_src

** Request Mode
#+begin_src elisp
;; Ctrl+d in vterm to quit
(require 'request)
(setq request-backend 'url-retrieve)
(request "http://httpbin.org/get"
  :params '(("key" . "value") ("key2" . "value2"))
  :parser 'json-read
  :success (cl-function
            (lambda (&key data &allow-other-keys)
              (message "I sent: %S" (assoc-default 'args data)))))
#+end_src

** Ledger Mode
#+begin_src elisp
;; Ctrl+d in vterm to quit
(setq ledger-master-file "~/Documents/GitHub/org/ledger/main.ledger")
(setq ledger-default-date-format "%d/%m/%Y")
#+end_src
** Magit

#+begin_src elisp
(setq magit-section-disable-line-numbers nil)
(with-eval-after-load 'magit
  (require 'forge))
(setq auth-sources '("~/.authinfo")) ;plaintext password TODO: use gpg
#+end_src

** Dap

#+begin_src elisp
(require 'dap-node)
#+end_src

** Workspaces

[[~/.emacs.d/.local/etc/workspaces/_workspaces][Saved workspace file]]

** Env

*** Open zshrc and zprofile
#+begin_src elisp
(defun open-zshrc ()
  (interactive)
  (find-file "~/.zshrc")
  )
(defun open-zprofile ()
  (interactive)
  (find-file "~/.zprofile")
  )
(map! :leader
      (:prefix-map ("o" . "open")
       (:prefix ("e" . "env")
        :desc "zshrc" "s" #'open-zshrc
        :desc "zprofile" "p" #'open-zprofile
        )))
#+end_src
